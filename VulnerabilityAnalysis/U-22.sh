#!/bin/bash

. function.sh

LOGFILE=$(MAKE_LOGFILE)

BAR
CODE '[U-22] cron 파일 소유자 및 권한 설정'
cat << EOF >> $RESULT
[양호]: cron 접근제어 파일 소유자가 root이고, 권한이 640 이하인 경우
[취약]: cron 접근제어 파일 소유자가 root가 아니거나, 권한이 640 이하가 아닌 경우
EOF
BAR

TMP1=$(mktemp)
> $TMP1

# ls -l /etc/cron.allow | awk '{print $1}' | grep '\-\-\-$'
# ls -l /etc/cron.deny | awk '{print $1}' | grep '\-\-\-$'

CRON_PERM_LIST=./U-22.fileperm.list
cat << EOF > $CRON_PERM_LIST
/etc/cron.allow  root  640  rw-r-----
/etc/cron.deny   root  640  rw-r-----
EOF

cat $CRON_PERM_LIST | while read FILENAME OWNER PERM1 PERM2
do
    # echo "$FILENAME $OWNER $PERM1 $PERM2"
    # find /etc/cron.allow -type f -perm -640 -ls | grep -v rw-r-----
    if [ -f $FILENAME ] ; then
        FINDFILE=$(find $FILENAME -type f -user $OWNER -perm -$PERM1 -ls | grep -v "$PERM2")
        if [ -z "$FINDFILE" ] ; then
            echo "[  OK  ] $FILENAME" >> $TMP1
        else
            # 34288174    0 -rw-rw-rw-   1 root     root            0 Aug  9  2019 /etc/cron.deny
            OWNER_PERM2=$(echo $FINDFILE | awk '{print $5, $3}')
            echo "[ WARN ] $FILENAME $OWNER_PERM2" >> $TMP1
        fi
    else
        echo "[ FAIL ] $FILENAME 존재하지 않습니다."  >> $TMP1
    fi
done 

if grep -qw 'WARN' $TMP1 ; then
    VUL "cron 접근제어 파일 소유자가 root가 아니거나, 권한이 640 이하가 아닌 경우"
    INFO "$LOGFILE 참고하세요."
else
    OK "cron 접근제어 파일 소유자가 root이고, 권한이 640 이하인 경우"
fi

cat << EOF > $LOGFILE
=====================================================
다음은 /etc/cron.deny, /etc/cron.allow 파일의 소유자와 퍼미션을 점검한 내용입니다.
=====================================================
* crontab 명령어 제어하는 파일은 root 사용자 소유이며, 640 퍼미션 이하이어야 한다.
* OK   : 정상적으로 파일이 존재하며, 퍼미션도 정상적으로 설정된 경우
* WARN : 정상적으로 파일이 존재하며, 퍼미션이 비정상인 경우
* FAIL : 파일이 존재하지 않는 경우
=====================================================
$(cat $TMP1)
=====================================================
EOF

rm -f $TMP1
rm -f $CRON_PERM_LIST
cat $RESULT
